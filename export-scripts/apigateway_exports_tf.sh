#!/usr/bin/env bash
# =========================================================
# Deep API Gateway exporter â†’ Terraform (no jq)
# Scans REST APIs (API Gateway v1) in a single region, exports:
# - aws_api_gateway_rest_api
# - aws_api_gateway_resource
# - aws_api_gateway_method
# - aws_api_gateway_integration
# - aws_api_gateway_method_response (stubs)
# - aws_api_gateway_integration_response (stubs)
# - aws_api_gateway_model
# - aws_api_gateway_authorizer
# - aws_api_gateway_deployment
# - aws_api_gateway_stage
# Produces: apigw.tf, apigw_imports.sh, variables.tf
# NOTE: This script focuses on REST APIs (not HTTP/API Gateway v2). It uses Python for JSON parsing
# and avoids jq. Run in Git Bash / Linux. Use AWS CLI configured with credentials.
# =========================================================

set -euo pipefail

OUT_TF="apigw.tf"
IMPORT_SH="apigw_imports.sh"
VAR_TF="variables.tf"
REGION="${AWS_REGION:-us-east-1}"

> "$OUT_TF"
> "$IMPORT_SH"
> "$VAR_TF"

mkdir -p .apigw_export_tmp
TMPDIR=".apigw_export_tmp"

echo "Starting API Gateway (REST) deep export in region: $REGION"

ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text --region "$REGION" 2>/dev/null || echo "UNKNOWN")

cat > "$VAR_TF" <<EOF
variable "account_id" {
  description = "AWS Account ID"
  type        = string
  default     = "$ACCOUNT_ID"
}

variable "environment" {
  description = "Environment tag"
  type        = string
}

variable "project_name" {
  description = "Project tag"
  type        = string
}

variable "region" {
  description = "AWS region"
  type        = string
  default     = "$REGION"
}
EOF

# sanitize name for tf resource
sanitize() {
  echo "$1" | tr -cd '[:alnum:]_' | sed 's/^[_]*//; s/[_]*$//' || echo "api"
}

# get list of REST APIs
REST_APIS_JSON="$TMPDIR/rest_apis.json"

echo "=== Scanning region: $REGION ==="
aws apigateway get-rest-apis --region "$REGION" --output json > "$REST_APIS_JSON"

# Parse API IDs, names, and descriptions (tab-separated)
API_IDS=$(python - <<PY
import json,sys
try:
    j=json.load(open("$REST_APIS_JSON"))
    for item in j.get("items", []):
        print("{}\t{}\t{}".format(item.get("id",""), item.get("name",""), item.get("description","") or ""))
except Exception:
    # fail silently and return nothing
    pass
PY
)

if [[ -z "$API_IDS" ]]; then
  echo "No REST APIs found in $REGION or failed to fetch. Inspect $REST_APIS_JSON"
  exit 0
fi

# Header comment in TF
cat >> "$OUT_TF" <<HCL
# Auto-generated API Gateway (REST) Terraform configuration
# Generated by export script. Review and adjust before apply.

HCL

# iterate APIs
while IFS= read -r line; do
  API_ID=$(echo "$line" | awk -F $'\t' '{print $1}')
  API_NAME=$(echo "$line" | awk -F $'\t' '{print $2}')
  API_DESC=$(echo "$line" | awk -F $'\t' '{print $3}')
  if [[ -z "$API_ID" ]]; then
    continue
  fi
  SAFE_API=$(sanitize "$API_NAME")
  if [[ -z "$SAFE_API" ]]; then SAFE_API="api_${API_ID}"; fi

  echo "Exporting API: ${API_NAME:-<no-name>} ($API_ID)"

  # write rest api resource
  cat >> "$OUT_TF" <<TF
resource "aws_api_gateway_rest_api" "$SAFE_API" {
  name = "$API_NAME"
  ${API_DESC:+description = "$(echo "$API_DESC" | sed 's/"/\\"/g')"}
  tags = {
    Environment = var.environment
    Project     = var.project_name
  }
}

TF

  # import command for rest api
  echo "terraform import aws_api_gateway_rest_api.$SAFE_API $API_ID" >> "$IMPORT_SH"

  # fetch resources for this api
  RES_JSON="$TMPDIR/resources_${API_ID}.json"
  aws apigateway get-resources --rest-api-id "$API_ID" --region "$REGION" --output json > "$RES_JSON" 2>/dev/null || true

  # parse resources: id,parentId,pathPart,path
  RES_MAP=$(python - <<PY
import json
try:
    j = json.load(open("$RES_JSON"))
    for r in j.get("items", []):
        print("{}\t{}\t{}\t{}".format(r.get("id",""), r.get("parentId") or "", r.get("pathPart") or "", r.get("path") or ""))
except Exception:
    pass
PY
)

  # Build a map of resource id -> safe name
  declare -A RES_NAME_MAP

  # create resources (skip root resource which has empty pathPart or path == '/')
  while IFS= read -r rline; do
    R_ID=$(echo "$rline" | awk -F $'\t' '{print $1}')
    R_PARENT=$(echo "$rline" | awk -F $'\t' '{print $2}')
    R_PART=$(echo "$rline" | awk -F $'\t' '{print $3}')
    R_PATH=$(echo "$rline" | awk -F $'\t' '{print $4}')
    # skip root
    if [[ "$R_PATH" == "/" || -z "$R_PART" ]]; then
      # store root id mapping
      RES_NAME_MAP["$R_ID"]="root"
      continue
    fi
    SAFE_R=$(sanitize "${SAFE_API}_${R_PART}")
    if [[ -z "$SAFE_R" ]]; then SAFE_R="res_${R_ID}"; fi
    RES_NAME_MAP["$R_ID"]="$SAFE_R"

    # write aws_api_gateway_resource
    cat >> "$OUT_TF" <<TF
resource "aws_api_gateway_resource" "$SAFE_R" {
  rest_api_id = aws_api_gateway_rest_api.$SAFE_API.id
  parent_id   = aws_api_gateway_rest_api.$SAFE_API.root_resource_id
  path_part   = "$R_PART"
}

TF

    # import command: <rest_api_id>/<resource_id>
    echo "terraform import aws_api_gateway_resource.$SAFE_R ${API_ID}/${R_ID}" >> "$IMPORT_SH"
  done <<< "$RES_MAP"

  # Now create methods and integrations for each resource
  # We'll re-iterate resources with get-resources again to get methods
  if [[ -s "$RES_JSON" ]]; then
    python - <<PY > "$TMPDIR/methods_${API_ID}.txt"
import json
try:
    j = json.load(open("$RES_JSON"))
    for r in j.get("items", []):
        rid = r.get("id")
        path = r.get("path")
        methods = r.get("resourceMethods") or {}
        for m in methods.keys():
            print("{}\t{}\t{}\t{}".format(rid, r.get("pathPart") or "", path or "", m))
except Exception:
    pass
PY

    while IFS= read -r mline; do
      R_ID=$(echo "$mline" | awk -F $'\t' '{print $1}')
      R_PART=$(echo "$mline" | awk -F $'\t' '{print $2}')
      R_PATH=$(echo "$mline" | awk -F $'\t' '{print $3}')
      HTTP_METHOD=$(echo "$mline" | awk -F $'\t' '{print $4}')
      # resolve safe resource name
      SAFE_RNAME=${RES_NAME_MAP[$R_ID]:-"${SAFE_API}_${R_PART}"}
      SAFE_RNAME=$(sanitize "$SAFE_RNAME")
      if [[ -z "$SAFE_RNAME" ]]; then SAFE_RNAME="res_${R_ID}"; fi
      SAFE_METHOD=$(sanitize "${SAFE_RNAME}_${HTTP_METHOD}")

      echo "Method $HTTP_METHOD on resource $R_PATH"

      # get method settings
      METHOD_JSON="$TMPDIR/method_${API_ID}_${R_ID}_${HTTP_METHOD}.json"
      aws apigateway get-method --rest-api-id "$API_ID" --resource-id "$R_ID" --http-method "$HTTP_METHOD" --region "$REGION" --output json > "$METHOD_JSON" 2>/dev/null || true

      # parse authorization, api key required
      AUTH_TYPE=$(python - <<PY
import json
try:
    j = json.load(open("$METHOD_JSON"))
    print(j.get("authorizationType","") or "")
except Exception:
    print("")
PY
)

      APIKEY_REQ=$(python - <<PY
import json
try:
    j = json.load(open("$METHOD_JSON"))
    print(str(j.get("apiKeyRequired",False)).lower())
except Exception:
    print("false")
PY
)

      # write method resource
      cat >> "$OUT_TF" <<TF
resource "aws_api_gateway_method" "${SAFE_METHOD}" {
  rest_api_id = aws_api_gateway_rest_api.$SAFE_API.id
  resource_id = aws_api_gateway_resource.$SAFE_RNAME.id
  http_method = "$HTTP_METHOD"
  authorization = "$AUTH_TYPE"
  api_key_required = $APIKEY_REQ
}

TF

      # import method: <rest_api_id>/<resource_id>/<http_method>
      echo "terraform import aws_api_gateway_method.${SAFE_METHOD} ${API_ID}/${R_ID}/${HTTP_METHOD}" >> "$IMPORT_SH"

      # attempt to export integration
      INTEGRATION_JSON="$TMPDIR/integration_${API_ID}_${R_ID}_${HTTP_METHOD}.json"
      aws apigateway get-integration --rest-api-id "$API_ID" --resource-id "$R_ID" --http-method "$HTTP_METHOD" --region "$REGION" --output json > "$INTEGRATION_JSON" 2>/dev/null || true

      if [[ -s "$INTEGRATION_JSON" ]]; then
        TYPE=$(python - <<PY
import json
try:
    j = json.load(open("$INTEGRATION_JSON"))
    print(j.get("type","") or "")
except Exception:
    print("")
PY
)
        URI=$(python - <<PY
import json
try:
    j = json.load(open("$INTEGRATION_JSON"))
    print(j.get("uri","") or "")
except Exception:
    print("")
PY
)
        INT_GRP=$(sanitize "${SAFE_RNAME}_${HTTP_METHOD}_int")
        echo "Integration type=$TYPE uri=$URI"
        cat >> "$OUT_TF" <<TF
resource "aws_api_gateway_integration" "$INT_GRP" {
  rest_api_id = aws_api_gateway_rest_api.$SAFE_API.id
  resource_id = aws_api_gateway_resource.$SAFE_RNAME.id
  http_method = aws_api_gateway_method.${SAFE_METHOD}.http_method
  integration_http_method = "${TYPE:-POST}"
  type = "$TYPE"
  ${URI:+uri = "${URI}"}
}

TF

        echo "terraform import aws_api_gateway_integration.$INT_GRP ${API_ID}/${R_ID}/${HTTP_METHOD}" >> "$IMPORT_SH"
      fi

      # method responses & integration responses (stubbed)
      MR_JSON="$TMPDIR/methodresp_${API_ID}_${R_ID}_${HTTP_METHOD}.json"
      aws apigateway get-method-response --rest-api-id "$API_ID" --resource-id "$R_ID" --http-method "$HTTP_METHOD" --status-code 200 --region "$REGION" --output json > /dev/null 2>/dev/null || true
      # We skip detailed method/integ responses export here; they often require manual refinement.

    done < "$TMPDIR/methods_${API_ID}.txt"
  fi

  # models
  MODELS_JSON="$TMPDIR/models_${API_ID}.json"
  aws apigateway get-models --rest-api-id "$API_ID" --region "$REGION" --output json > "$MODELS_JSON" 2>/dev/null || true
  if [[ -s "$MODELS_JSON" ]]; then
    python - <<PY >> "$OUT_TF"
import json
try:
    j = json.load(open("$MODELS_JSON"))
    for name, m in j.get("models", {}).items():
        safe = ''.join(c if c.isalnum() else '_' for c in name)
        print('resource "aws_api_gateway_model" "' + safe + '" {')
        print('  name = "%s"' % name)
        schema = m.get('schema') or ''
        if schema:
            print('  schema = <<SCHEMA')
            print(json.dumps(schema))
            print('SCHEMA')
        print('  rest_api_id = aws_api_gateway_rest_api.%s.id' % "$SAFE_API")
        print('}')
        print('')
except Exception:
    pass
PY
    # import models (rest_api_id/model_name)
    python - <<PY >> "$IMPORT_SH"
import json
try:
    j = json.load(open("$MODELS_JSON"))
    for name in j.get("models",{}).keys():
        safe = ''.join(c if c.isalnum() else '_' for c in name)
        print('terraform import aws_api_gateway_model.%s %s/%s' % (safe, "$API_ID", name))
except Exception:
    pass
PY
  fi

  # authorizers
  AUTH_JSON="$TMPDIR/auth_${API_ID}.json"
  aws apigateway get-authorizers --rest-api-id "$API_ID" --region "$REGION" --output json > "$AUTH_JSON" 2>/dev/null || true
  if [[ -s "$AUTH_JSON" ]]; then
    python - <<PY >> "$OUT_TF"
import json
try:
    j = json.load(open("$AUTH_JSON"))
    for a in j.get("items", []):
        name = a.get("name") or "auth"
        safe = ''.join(c if c.isalnum() else '_' for c in name)
        print('resource "aws_api_gateway_authorizer" "' + safe + '" {')
        print('  name = "%s"' % name)
        print('  rest_api_id = aws_api_gateway_rest_api.%s.id' % "$SAFE_API")
        if a.get("providerARNs"):
            print('  provider_arns = [')
            for p in a.get("providerARNs"):
                print('    "%s",' % p)
            print('  ]')
        print('}')
        print('')
except Exception:
    pass
PY
    # imports for authorizers
    python - <<PY >> "$IMPORT_SH"
import json
try:
    j = json.load(open("$AUTH_JSON"))
    for a in j.get("items", []):
        name = a.get("name") or "auth"
        safe = ''.join(c if c.isalnum() else '_' for c in name)
        id = a.get("id")
        if id:
            print('terraform import aws_api_gateway_authorizer.%s %s/%s' % (safe, "$API_ID", id))
except Exception:
    pass
PY
  fi

  # deployments and stages
  DEPLOY_JSON="$TMPDIR/deploys_${API_ID}.json"
  aws apigateway get-deployments --rest-api-id "$API_ID" --region "$REGION" --output json > "$DEPLOY_JSON" 2>/dev/null || true
  if [[ -s "$DEPLOY_JSON" ]]; then
    python - <<PY >> "$OUT_TF"
import json
try:
    j = json.load(open("$DEPLOY_JSON"))
    for d in j.get("items", []):
        id = d.get("id")
        desc = d.get("description") or ""
        print('resource "aws_api_gateway_deployment" "deploy_%s" {' % id)
        print('  rest_api_id = aws_api_gateway_rest_api.%s.id' % "$SAFE_API")
        if desc:
            print('  description = "%s"' % desc.replace('"','\\"'))
        print('}')
        print('')
except Exception:
    pass
PY
    python - <<PY >> "$IMPORT_SH"
import json
try:
    j = json.load(open("$DEPLOY_JSON"))
    for d in j.get("items", []):
        id = d.get("id")
        if id:
            print('terraform import aws_api_gateway_deployment.deploy_%s %s/%s' % (id, "$API_ID", id))
except Exception:
    pass
PY
  fi

  STAGE_JSON="$TMPDIR/stages_${API_ID}.json"
  aws apigateway get-stages --rest-api-id "$API_ID" --region "$REGION" --output json > "$STAGE_JSON" 2>/dev/null || true
  if [[ -s "$STAGE_JSON" ]]; then
    python - <<PY >> "$OUT_TF"
import json
try:
    j = json.load(open("$STAGE_JSON"))
    for s in j.get("item", []):
        name = s.get("stageName")
        safe = ''.join(c if c.isalnum() else '_' for c in (name or "stage"))
        print('resource "aws_api_gateway_stage" "' + safe + '" {')
        print('  stage_name = "%s"' % name)
        print('  rest_api_id = aws_api_gateway_rest_api.%s.id' % "$SAFE_API")
        print('  deployment_id = aws_api_gateway_deployment.deploy_%s.id' % s.get("deploymentId",""))
        print('}')
        print('')
except Exception:
    pass
PY
    python - <<PY >> "$IMPORT_SH"
import json
try:
    j = json.load(open("$STAGE_JSON"))
    for s in j.get("item", []):
        name = s.get("stageName")
        if name:
            safe = ''.join(c if c.isalnum() else '_' for c in name)
            print('terraform import aws_api_gateway_stage.%s %s/%s' % (safe, "$API_ID", name))
except Exception:
    pass
PY
  fi

done <<< "$API_IDS"
